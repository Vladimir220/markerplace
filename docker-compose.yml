services:
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: qwerty
    ports:
      - '5433:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 10s
      retries: 10
  
  redis:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
  kafka:
    image: bitnami/kafka:4.0.0
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker 
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    volumes:
      - .\kafka_migration\:/migration/
    command: "/migration/kafka_migration.sh;"
    ports:
      - '9092:9092'
      - '9093:9093'
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server :9092"]
      interval: 3s
      timeout: 10s
      retries: 10
      start_period: 5s

  logger_service:
    build:
      dockerfile: ./logger_service/.Dockerfile
    volumes:
      - .\logger_service\:/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "logger_service:8888/health"]
      retries: 5
    depends_on:
      kafka:
        condition:
          "service_healthy"

  migration_service:
    build:
      dockerfile: ./migration_service/.Dockerfile
    volumes:
      - .\migration_service\:/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "migration_service/health"]
      retries: 5
    depends_on:
      postgres:
        condition: 
          "service_healthy"
      logger_service:
        condition:
          "service_healthy"


  auth_service:
    build:
      dockerfile: ./auth_service/.Dockerfile
    volumes:
      - .\auth_service\:/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "auth_service:8888/health"]
      retries: 5
    depends_on:
      postgres:
        condition: 
          "service_healthy"
      logger_service:
        condition:
          "service_healthy"
      migration_service:
        condition:
          "service_completed_successfully"
      redis:
        condition: 
          "service_healthy"

  reader_db_service:
    build:
      dockerfile: ./reader_db_service/.Dockerfile
    volumes:
      - .\reader_db_service\:/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "reader_db_service:8888/health"]
      retries: 5
    depends_on:
      postgres:
        condition: 
          "service_healthy"
      logger_service:
        condition:
          "service_healthy"
      migration_service:
        condition:
          "service_completed_successfully"

  writer_db_service:
    build:
      dockerfile: ./writer_db_service/.Dockerfile
    volumes:
      - .\writer_db_service\:/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "writer_db_service:8888/health"]
      retries: 5
    depends_on:
      kafka:
        condition: 
          "service_healthy"
      postgres:
        condition: 
          "service_healthy"
      logger_service:
        condition:
          "service_healthy"
      migration_service:
        condition:
          "service_completed_successfully"

  marketplace:
    build:
      dockerfile: ./marketplace/.Dockerfile
    ports:
      - "1234:1234"
    volumes:
      - .\marketplace\:/app/
    depends_on:
      kafka:
        condition: 
          "service_healthy"
      postgres:
        condition: 
          "service_healthy"
      logger_service:
        condition:
          "service_healthy"
      migration_service:
        condition:
          "service_completed_successfully"
      redis:
        condition: 
          "service_healthy"
      writer_db_service:
        condition:
          "service_healthy"
      reader_db_service:
        condition:
          "service_healthy"
      auth_service:
        condition:
          "service_healthy"